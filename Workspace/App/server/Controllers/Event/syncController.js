const { google } = require("googleapis");
const Event = require("../../Models/Event"); // Gi·∫£ s·ª≠ b·∫°n c√≥ model Event
const User = require("../../Models/User");

const syncGoogleCalendar = async (req, res) => {
    console.log("syncGoogleCalendar loaded");
    const user = req.user;

    if (!user.googleAccessToken || !user.googleRefreshToken) {
        return res.status(403).json({ message: "Google Calendar ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi." });
    }

    const oauth2Client = new google.auth.OAuth2(
        process.env.GG_CLIENT_ID,
        process.env.GG_CLIENT_SECRET,
        process.env.GG_REDIRECT_URI
    );

    oauth2Client.setCredentials({
        access_token: user.googleAccessToken,
        refresh_token: user.googleRefreshToken,
    });

    const calendar = google.calendar({ version: "v3", auth: oauth2Client });

    try {
        const events = await calendar.events.list({
            calendarId: "primary",
            timeMin: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // l·∫•y t·ª´ 7 ng√†y tr∆∞·ªõc
            maxResults: 50,
            singleEvents: true,
            orderBy: "startTime",
        });

        const rawEvents = events.data.items;
        const filteredEvents = rawEvents.filter(ev => {
            // B·ªè qua c√°c s·ª± ki·ªán l·∫∑p l·∫°i ho·∫∑c ƒë∆∞·ª£c t·∫°o b·ªüi calendar ng√†y l·ªÖ
            const isRecurring = ev.recurringEventId || ev.recurrence;
            const isHoliday = ev.organizer?.displayName?.toLowerCase().includes("holiday")
                || ev.summary?.toLowerCase().includes("t·∫øt")
                || ev.summary?.toLowerCase().includes("gi√°ng sinh")
                || ev.creator?.email?.includes("holiday")
                || ev.description?.toLowerCase().includes("holiday");

            return !isRecurring && !isHoliday;
        });

        // L∆∞u v√†o MongoDB n·∫øu ch∆∞a c√≥
        let addedCount = 0;

        for (const ev of filteredEvents) {
            const exists = await Event.findOne({
                userId: user._id,
                title: ev.summary,
                start: new Date(ev.start.dateTime || ev.start.date)
            });

            if (!exists) {
                await Event.create({
                    userId: user._id,
                    title: ev.summary || "Kh√¥ng ti√™u ƒë·ªÅ",
                    description: ev.description || "",
                    start: new Date(ev.start.dateTime || ev.start.date),
                    end: new Date(ev.end.dateTime || ev.end.date),
                    category: "other",  // ho·∫∑c map theo logic c·ªßa b·∫°n
                    completed: false
                });
                addedCount++;
            }
        }


        return res.status(200).json({ message: `ƒê√£ th√™m ${addedCount} s·ª± ki·ªán t·ª´ Google Calendar.` });
    } catch (error) {
        console.error("‚ùå L·ªói khi sync Google Calendar:", error);
        console.error("üîç Chi ti·∫øt l·ªói:", error);
        return res.status(500).json({ message: "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Google Calendar." });
    }
};

const addEventToGoogleCalendar = async (req, res) => {
    const user = req.user;

    if (!user.googleAccessToken || !user.googleRefreshToken) {
        return res.status(403).json({ message: "Google Calendar ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi." });
    }

    const { title, description, start, end } = req.body;

    const oauth2Client = new google.auth.OAuth2(
        process.env.GG_CLIENT_ID,
        process.env.GG_CLIENT_SECRET,
        process.env.GG_REDIRECT_URI
    );

    oauth2Client.setCredentials({
        access_token: user.googleAccessToken,
        refresh_token: user.googleRefreshToken,
    });

    oauth2Client.on("tokens", (tokens) => {
        if (tokens.access_token) {
          user.googleAccessToken = tokens.access_token;
          user.save(); // üîÅ C·∫≠p nh·∫≠t DB
          console.log("üîÅ Refreshed and saved new Google access_token");
        }
      });
      

    const calendar = google.calendar({ version: "v3", auth: oauth2Client });

    try {
        const event = {
            summary: title,
            description: description,
            start: { dateTime: start, timeZone: "Asia/Ho_Chi_Minh" },
            end: { dateTime: end, timeZone: "Asia/Ho_Chi_Minh" },
        };

        const response = await calendar.events.insert({
            calendarId: "primary",
            resource: event,
        });

        res.status(200).json({ message: "S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c th√™m v√†o Google Calendar.", event: response.data });
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m s·ª± ki·ªán v√†o Google Calendar:", error);
        res.status(500).json({ message: "Kh√¥ng th·ªÉ th√™m s·ª± ki·ªán v√†o Google Calendar." });
    }
};


const refreshGoogleToken = async (req, res) => {
  const { refreshToken } = req.body; // L·∫•y refresh token t·ª´ client ho·∫∑c database

  if (!refreshToken) {
    return res.status(400).json({ message: "Refresh token is required" });
  }

  try {
    const response = await axios.post("https://oauth2.googleapis.com/token", {
      client_id: process.env.GOOGLE_CLIENT_ID,
      client_secret: process.env.GOOGLE_CLIENT_SECRET,
      refresh_token: refreshToken,
      grant_type: "refresh_token",
    });

    const { access_token, expires_in } = response.data;

    // Tr·∫£ v·ªÅ access token m·ªõi
    res.status(200).json({ access_token, expires_in });
  } catch (error) {
    console.error("Error refreshing Google token:", error.response?.data || error.message);
    res.status(500).json({ message: "Failed to refresh token" });
  }
};


module.exports = {
    syncGoogleCalendar,
    addEventToGoogleCalendar, // Export h√†m m·ªõi
    refreshGoogleToken ,
};
